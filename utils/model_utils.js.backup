const baiduAi = require('./baidu_ai.js');

// 通义千问VL模型配置
const QWEN_VL_CONFIG = {
  apiKey: 'sk-768522cdd6d741b68972ed9a9cc36e60', // 注意：生产环境中应该将API Key移到配置文件或环境变量
  baseUrl: 'https://dashscope.aliyuncs.com/api/v1/services/aigc/multimodal-generation/generation'
};

/**
 * 获取当前选择的模型
 */
function getCurrentModel() {
  const settings = wx.getStorageSync('appSettings') || {};
  return settings.selectedModel || 'qwen-vl'; // 默认使用通义千问VL
}

/**
 * 测试模型连接
 */
function testConnection(modelType = null) {
  const model = modelType || getCurrentModel();
  
  if (model === 'baidu') {
    return baiduAi.testApiConnection();
  } else if (model === 'qwen-vl') {
    return testQwenVLConnection();
  } else {
    return Promise.reject(new Error('未知的模型类型'));
  }
}

/**
 * 测试通义千问VL连接
 */
function testQwenVLConnection() {
  return new Promise((resolve, reject) => {
    if (!QWEN_VL_CONFIG.apiKey) {
      reject(new Error('通义千问VL API Key未配置'));
      return;
    }
    
    console.log('测试通义千问VL连接...');
    console.log('API端点:', QWEN_VL_CONFIG.baseUrl);
    console.log('API Key:', QWEN_VL_CONFIG.apiKey.substring(0, 10) + '...');
    
    // 发送一个简单的测试请求
    wx.request({
      url: QWEN_VL_CONFIG.baseUrl,
      method: 'POST',
      timeout: 15000, // 15秒超时
      header: {
        'Authorization': `Bearer ${QWEN_VL_CONFIG.apiKey}`,
        'Content-Type': 'application/json'
      },
          data: {
            model: 'qwen-vl-max',
            input: {
              messages: [
                {
                  role: 'user',
                  content: '你好'
                }
              ]
            },
            parameters: {
              result_format: 'message'
            }
          },
          success: (res) => {
            console.log('通义千问VL测试响应:', res);
            console.log('响应状态码:', res.statusCode);
            console.log('响应数据:', res.data);
            
            if (res.statusCode === 200) {
              resolve(true);
            } else {
              const errorMsg = res.data?.message || res.data?.error?.message || res.data?.error_msg || `HTTP ${res.statusCode}`;
              console.log('API错误详情:', {
                statusCode: res.statusCode,
                data: res.data,
                errorMsg: errorMsg
              });
              reject(new Error(`连接失败: ${errorMsg}`));
            }
          },
          fail: (err) => {
            console.log('通义千问VL测试失败:', err);
            console.log('失败详情:', {
              errMsg: err.errMsg,
              errno: err.errno,
              error: err
            });
            
            if (err.errMsg && err.errMsg.includes('域名不在白名单')) {
              reject(new Error('域名不在白名单，请在微信小程序后台配置服务器域名：https://dashscope.aliyuncs.com'));
            } else if (err.errMsg && err.errMsg.includes('timeout')) {
              reject(new Error(`网络请求超时: ${err.errMsg}。请检查网络连接或稍后重试。`));
            } else if (err.errMsg && err.errMsg.includes('request:fail')) {
              reject(new Error(`网络请求失败: ${err.errMsg}。请检查网络连接或域名配置。`));
            } else {
              reject(new Error(`测试失败: ${err.errMsg || '未知错误'}`));
            }
          }
    });
  });
}

/**
 * 识别植物（根据当前选择的模型）
 */
function recognizePlant(filePath, location = null, onProgress = null) {
  const model = getCurrentModel();
  
  if (model === 'baidu') {
    return baiduAi.recognizePlant(filePath);
  } else if (model === 'qwen-vl') {
    return recognizePlantWithQwenVL(filePath, location, onProgress);
  } else {
    return Promise.reject(new Error('未知的模型类型'));
  }
}

/**
 * 检查网络状态
 */
function checkNetworkStatus() {
  return new Promise((resolve, reject) => {
    wx.getNetworkType({
      success: (res) => {
        if (res.networkType === 'none') {
          reject(new Error('无网络连接，请检查网络设置'));
        } else {
          resolve(res.networkType);
        }
      },
      fail: () => {
        reject(new Error('无法检测网络状态'));
      }
    });
  });
}

/**
 * 压缩图片
 */
function compressImage(filePath, quality = 0.4) {
  return new Promise((resolve, reject) => {
    console.log('开始压缩图片:', filePath);
    
    wx.compressImage({
      src: filePath,
      quality: quality,
      compressedHeight: 256, // 大幅减小到256像素
      compressedWidth: 256,  // 大幅减小到256像素
      success: (res) => {
        console.log('图片压缩成功:', res.tempFilePath);
        
        // 获取文件信息
        wx.getFileInfo({
          filePath: res.tempFilePath,
          success: (fileInfo) => {
            console.log('压缩后文件大小:', fileInfo.size, '字节');
            console.log('压缩后文件大小:', (fileInfo.size / 1024).toFixed(2), 'KB');
            
            // 估算base64大小
            const estimatedBase64Size = (fileInfo.size * 4 / 3);
            console.log('预估base64大小:', (estimatedBase64Size / 1024).toFixed(2), 'KB');
          }
        });
        
        resolve(res.tempFilePath);
      },
      fail: (err) => {
        console.log('图片压缩失败，使用原图片:', err);
        // 如果压缩失败，使用原图片
        resolve(filePath);
      }
    });
  });
}

/**
 * 检查base64字符串长度并进行处理
 */
function processImageForAPI(base64Data, prompt) {
  const promptLength = prompt.length;
  const base64Length = base64Data.length;
  const totalLength = promptLength + base64Length + 100; // 加上更多安全边距
  
  console.log('API输入长度检查:');
  console.log('提示词长度:', promptLength);
  console.log('图片base64长度:', base64Length);
  console.log('总长度:', totalLength);
  console.log('限制长度:', 129024);
  
  // 更激进的长度控制，目标是80%的限制
  const targetLength = 129024 * 0.8; // 使用80%的限制作为目标
  
  if (totalLength > targetLength) {
    console.log('输入长度过长，进行大幅压缩');
    // 计算安全的图片长度，预留更多空间
    const maxImageLength = Math.floor(targetLength - promptLength - 200); // 预留200字符
    
    if (maxImageLength > 1000) { // 确保图片数据至少有1000字符
      const truncatedBase64 = base64Data.substring(0, maxImageLength);
      console.log('大幅截取后的图片base64长度:', truncatedBase64.length);
      console.log('新的总长度估计:', promptLength + truncatedBase64.length + 100);
      return truncatedBase64;
    } else {
      console.log('警告：图片数据过小，可能影响识别效果');
      return base64Data.substring(0, 1000); // 最小保留1000字符
    }
  }
  
  return base64Data;
}


/**
 * 使用通义千问VL识别植物
 */
function recognizePlantWithQwenVL(filePath, location = null, onProgress = null) {
  return new Promise(async (resolve, reject) => {
    try {
      // 首先检查网络状态
      if (onProgress) onProgress('正在检查网络状态...');
      await checkNetworkStatus();
      
      // 压缩图片
      if (onProgress) onProgress('正在压缩图片...');
      const compressedFilePath = await compressImage(filePath, 0.3); // 使用0.3的质量进行极度压缩
      
      // 设置超时保护
      const timeoutId = setTimeout(() => {
        reject(new Error('识别超时，请重试'));
      }, 90000); // 90秒超时，给图片上传和AI处理更多时间
      
      // 读取压缩后的图片文件
      const fileSystemManager = wx.getFileSystemManager();
      fileSystemManager.readFile({
        filePath: compressedFilePath,
        encoding: 'base64',
        success: (res) => {
        let imageBase64 = res.data;
        const currentDate = new Date().toLocaleDateString('zh-CN');
        const locationText = location ? `位置：纬度${location.latitude}，经度${location.longitude}` : '位置：未知';
        
        // 构建提示词
        const prompt = `请分析这张植物照片，并提供以下格式化的信息：
1. 名称：
2. 其他名称，学名：
3. 浇水tips：
4. 光照tips：
5. 从照片判断目前健康信息：
6. 根据日期（${currentDate}）和地理位置（${locationText}）得出的综合养护tips：
7. 其他有意思的小信息：

请用中文回答，内容要详细且实用。`;

        // 检查并处理输入长度
        if (onProgress) onProgress('正在处理图片数据...');
        imageBase64 = processImageForAPI(imageBase64, prompt);

        // 通知进度：开始发送请求
        if (onProgress) onProgress('正在发送请求到AI模型...');

        console.log('=== API请求详细信息 ===');
        console.log('API端点:', QWEN_VL_CONFIG.baseUrl);
        console.log('图片base64长度:', imageBase64.length);
        console.log('提示词长度:', prompt.length);
        
        // 使用更简化的提示词以减少数据量
        const simplifiedPrompt = '识别植物名称';
        const finalContent = `${simplifiedPrompt}<img>data:image/jpeg;base64,${imageBase64}</img>`;
        
        console.log('最终content长度:', finalContent.length);
        console.log('准备发送请求...');
        
        // 添加请求时间戳
        const requestStartTime = Date.now();
        console.log('请求开始时间:', new Date(requestStartTime).toLocaleTimeString());

        // 发送请求到通义千问VL
        wx.request({
          url: QWEN_VL_CONFIG.baseUrl,
          method: 'POST',
          timeout: 30000, // 缩短到30秒超时
          header: {
            'Authorization': `Bearer ${QWEN_VL_CONFIG.apiKey}`,
            'Content-Type': 'application/json'
          },
          data: {
            model: 'qwen-vl-max',
            input: {
              messages: [
                {
                  role: 'user',
                  content: finalContent
                }
              ]
            },
            parameters: {
              result_format: 'message'
            }
          },
          success: (apiRes) => {
            const requestEndTime = Date.now();
            const requestDuration = requestEndTime - requestStartTime;
            console.log('请求完成时间:', new Date(requestEndTime).toLocaleTimeString());
            console.log('请求耗时:', requestDuration, 'ms');
            console.log('通义千问VL识别响应:', apiRes);
            console.log('响应状态码:', apiRes.statusCode);
            console.log('响应数据:', apiRes.data);
            
            // 通知进度：收到响应
            if (onProgress) onProgress('正在解析AI响应...');
            
            if (apiRes.statusCode === 200 && apiRes.data) {
              let content = '';
              
              // 尝试多种响应格式
              if (apiRes.data.output && apiRes.data.output.choices && apiRes.data.output.choices[0] && apiRes.data.output.choices[0].message) {
                content = apiRes.data.output.choices[0].message.content;
              } else if (apiRes.data.output && apiRes.data.output.text) {
                content = apiRes.data.output.text;
              } else if (apiRes.data.output && apiRes.data.output.content) {
                content = apiRes.data.output.content;
              } else if (apiRes.data.content) {
                content = apiRes.data.content;
              } else if (apiRes.data.text) {
                content = apiRes.data.text;
              } else if (typeof apiRes.data === 'string') {
                content = apiRes.data;
              }
              
              if (content) {
                console.log('提取到的内容:', content);
                clearTimeout(timeoutId); // 清除超时定时器
                const result = parseQwenVLResponse(content);
                console.log('解析后的结果:', result);
                resolve(result);
              } else {
                console.log('无法提取响应内容，完整响应:', apiRes.data);
                clearTimeout(timeoutId); // 清除超时定时器
                reject(new Error('无法从API响应中提取内容'));
              }
            } else {
              const errorMsg = apiRes.data?.message || apiRes.data?.error?.message || apiRes.data?.error_msg || `HTTP ${apiRes.statusCode}`;
              console.log('识别API错误详情:', {
                statusCode: apiRes.statusCode,
                data: apiRes.data,
                errorMsg: errorMsg
              });
              clearTimeout(timeoutId); // 清除超时定时器
              reject(new Error(`识别失败: ${errorMsg}`));
            }
          },
          fail: (apiErr) => {
            const requestEndTime = Date.now();
            const requestDuration = requestEndTime - requestStartTime;
            console.log('请求失败时间:', new Date(requestEndTime).toLocaleTimeString());
            console.log('请求耗时:', requestDuration, 'ms');
            console.log('通义千问VL识别失败:', apiErr);
            console.log('失败详情:', {
              errMsg: apiErr.errMsg,
              errno: apiErr.errno,
              error: apiErr
            });
            
            clearTimeout(timeoutId); // 清除超时定时器
            
            if (apiErr.errMsg && apiErr.errMsg.includes('域名不在白名单')) {
              reject(new Error('域名不在白名单，请在微信小程序后台配置服务器域名：https://dashscope.aliyuncs.com'));
            } else if (apiErr.errMsg && apiErr.errMsg.includes('timeout')) {
              reject(new Error(`网络请求超时: ${apiErr.errMsg}。请检查网络连接或稍后重试。`));
            } else if (apiErr.errMsg && apiErr.errMsg.includes('request:fail')) {
              reject(new Error(`网络请求失败: ${apiErr.errMsg}。请检查网络连接或域名配置。`));
            } else {
              reject(new Error(`识别失败: ${apiErr.errMsg || '未知错误'}`));
            }
          }
        });
      },
      fail: (fsErr) => {
        clearTimeout(timeoutId); // 清除超时定时器
        reject(new Error(`图片读取失败: ${fsErr.errMsg || '未知错误'}`));
      }
    });
    } catch (error) {
      // 捕获网络检查等初始化错误
      reject(error);
    }
  });
}

/**
 * 解析通义千问VL的响应
 */
function parseQwenVLResponse(content) {
  const lines = content.split('\n').filter(line => line.trim());
  
  const result = {
    name: '未知植物',
    scientificName: '',
    wateringTips: '',
    lightingTips: '',
    healthInfo: '',
    careTips: '',
    funFacts: '',
    model: 'qwen-vl',
    rawResponse: content
  };
  
  let currentSection = '';
  
  for (let line of lines) {
    const trimmedLine = line.trim();
    
    if (trimmedLine.includes('名称：') || trimmedLine.includes('1.')) {
      currentSection = 'name';
      result.name = extractValue(trimmedLine, ['名称：', '1.']);
    } else if (trimmedLine.includes('其他名称') || trimmedLine.includes('学名') || trimmedLine.includes('2.')) {
      currentSection = 'scientificName';
      result.scientificName = extractValue(trimmedLine, ['其他名称', '学名', '2.']);
    } else if (trimmedLine.includes('浇水') || trimmedLine.includes('3.')) {
      currentSection = 'wateringTips';
      result.wateringTips = extractValue(trimmedLine, ['浇水', '3.']);
    } else if (trimmedLine.includes('光照') || trimmedLine.includes('4.')) {
      currentSection = 'lightingTips';
      result.lightingTips = extractValue(trimmedLine, ['光照', '4.']);
    } else if (trimmedLine.includes('健康信息') || trimmedLine.includes('5.')) {
      currentSection = 'healthInfo';
      result.healthInfo = extractValue(trimmedLine, ['健康信息', '5.']);
    } else if (trimmedLine.includes('综合养护') || trimmedLine.includes('6.')) {
      currentSection = 'careTips';
      result.careTips = extractValue(trimmedLine, ['综合养护', '6.']);
    } else if (trimmedLine.includes('小信息') || trimmedLine.includes('7.')) {
      currentSection = 'funFacts';
      result.funFacts = extractValue(trimmedLine, ['小信息', '7.']);
    } else if (trimmedLine && !trimmedLine.match(/^\d+\./)) {
      // 继续当前部分的内容
      if (currentSection && result[currentSection]) {
        result[currentSection] += ' ' + trimmedLine;
      }
    }
  }
  
  // 清理结果
  Object.keys(result).forEach(key => {
    if (typeof result[key] === 'string') {
      result[key] = result[key].trim();
    }
  });
  
  return result;
}

/**
 * 提取值
 */
function extractValue(line, keywords) {
  for (let keyword of keywords) {
    const index = line.indexOf(keyword);
    if (index !== -1) {
      return line.substring(index + keyword.length).trim();
    }
  }
  return line;
}

/**
 * 分析植物健康状态（拍照分析）
 */
function analyzePlantHealth(filePath, location = null) {
  const model = getCurrentModel();
  
  if (model === 'qwen-vl') {
    return analyzeHealthWithQwenVL(filePath, location);
  } else {
    // 百度AI不支持健康分析，返回基础信息
    return baiduAi.recognizePlant(filePath).then(result => {
      return {
        ...result,
        healthAnalysis: '请使用通义千问VL模型获得详细的健康分析',
        model: 'baidu'
      };
    });
  }
}

/**
 * 使用通义千问VL分析植物健康状态
 */
function analyzeHealthWithQwenVL(filePath, location = null) {
  return new Promise(async (resolve, reject) => {
    try {
      // 首先检查网络状态
      await checkNetworkStatus();
      
      // 压缩图片
      const compressedFilePath = await compressImage(filePath, 0.6);
      
      const fileSystemManager = wx.getFileSystemManager();
      fileSystemManager.readFile({
        filePath: compressedFilePath,
        encoding: 'base64',
        success: (res) => {
        let imageBase64 = res.data;
        const currentDate = new Date().toLocaleDateString('zh-CN');
        const locationText = location ? `位置：纬度${location.latitude}，经度${location.longitude}` : '位置：未知';
        
        const prompt = `请分析这张植物照片的当前健康状态，并提供养护建议：

当前日期：${currentDate}
${locationText}

请从以下几个方面分析：
1. 植物整体健康状况（优秀/良好/一般/需要关注）
2. 叶片状态分析
3. 土壤湿度判断
4. 是否需要浇水
5. 是否需要施肥
6. 光照是否充足
7. 其他养护建议

请用中文回答，内容要详细且实用。`;

        // 检查并处理输入长度
        imageBase64 = processImageForAPI(imageBase64, prompt);

        wx.request({
          url: QWEN_VL_CONFIG.baseUrl,
          method: 'POST',
          timeout: 60000, // 60秒超时，图片分析需要更多时间
          header: {
            'Authorization': `Bearer ${QWEN_VL_CONFIG.apiKey}`,
            'Content-Type': 'application/json'
          },
          data: {
            model: 'qwen-vl-max',
            input: {
              messages: [
                {
                  role: 'user',
                  content: `${prompt}<img>data:image/jpeg;base64,${imageBase64}</img>`
                }
              ]
            },
            parameters: {
              result_format: 'message'
            }
          },
          success: (apiRes) => {
            console.log('通义千问VL健康分析响应:', apiRes);
            console.log('响应状态码:', apiRes.statusCode);
            console.log('响应数据:', apiRes.data);
            
            if (apiRes.statusCode === 200 && apiRes.data) {
              let content = '';
              
              // 尝试多种响应格式
              if (apiRes.data.output && apiRes.data.output.choices && apiRes.data.output.choices[0] && apiRes.data.output.choices[0].message) {
                content = apiRes.data.output.choices[0].message.content;
              } else if (apiRes.data.output && apiRes.data.output.text) {
                content = apiRes.data.output.text;
              } else if (apiRes.data.output && apiRes.data.output.content) {
                content = apiRes.data.output.content;
              } else if (apiRes.data.content) {
                content = apiRes.data.content;
              } else if (apiRes.data.text) {
                content = apiRes.data.text;
              } else if (typeof apiRes.data === 'string') {
                content = apiRes.data;
              }
              
              if (content) {
                console.log('提取到的健康分析内容:', content);
                const result = {
                  healthAnalysis: content,
                  model: 'qwen-vl',
                  analysisDate: new Date().toISOString(),
                  location: location
                };
                resolve(result);
              } else {
                console.log('无法提取健康分析响应内容，完整响应:', apiRes.data);
                reject(new Error('无法从API响应中提取健康分析内容'));
              }
            } else {
              const errorMsg = apiRes.data?.message || apiRes.data?.error?.message || apiRes.data?.error_msg || `HTTP ${apiRes.statusCode}`;
              console.log('健康分析API错误详情:', {
                statusCode: apiRes.statusCode,
                data: apiRes.data,
                errorMsg: errorMsg
              });
              reject(new Error(`分析失败: ${errorMsg}`));
            }
          },
          fail: (apiErr) => {
            console.log('通义千问VL健康分析失败:', apiErr);
            if (apiErr.errMsg && apiErr.errMsg.includes('timeout')) {
              reject(new Error(`网络请求超时: ${apiErr.errMsg}。请检查网络连接或稍后重试。`));
            } else if (apiErr.errMsg && apiErr.errMsg.includes('request:fail')) {
              reject(new Error(`网络请求失败: ${apiErr.errMsg}。请检查网络连接或域名配置。`));
            } else {
              reject(new Error(`分析失败: ${apiErr.errMsg || '未知错误'}`));
            }
          }
        });
      },
      fail: (fsErr) => {
        reject(new Error(`图片读取失败: ${fsErr.errMsg || '未知错误'}`));
      }
    });
    } catch (error) {
      // 捕获网络检查等初始化错误
      reject(error);
    }
  });
}

/**
 * 简单的API连接测试
 */
function simpleApiTest() {
  return new Promise((resolve, reject) => {
    console.log('开始简单API测试...');
    
    wx.request({
      url: 'https://dashscope.aliyuncs.com/api/v1/services/aigc/multimodal-generation/generation',
      method: 'POST',
      timeout: 5000,
      header: {
        'Authorization': `Bearer ${QWEN_VL_CONFIG.apiKey}`,
        'Content-Type': 'application/json'
      },
      data: {
        model: 'qwen-vl-max',
        input: {
          messages: [
            {
              role: 'user',
              content: '你好'
            }
          ]
        }
      },
      success: (res) => {
        console.log('简单测试成功:', res);
        resolve(res);
      },
      fail: (err) => {
        console.log('简单测试失败:', err);
        reject(err);
      }
    });
  });
}

module.exports = {
  getCurrentModel,
  testConnection,
  recognizePlant,
  analyzePlantHealth,
  simpleApiTest
};
